<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Node.js 实现微信小程序登录</title>
    <url>/2020/01/03/notes/Node.js%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一段时间一直在进行微信小程序的开发，而微信对于用户的登录鉴权有一套特有的流程，所以在这儿进行一些记录。个人服务中，登录属于公共服务，用户信息在微信所有平台（小程序、公众号页面）中应为公用数据。如需了解公众号页面登录实现请移步<a href="">Node.js实现微信公众号页面登录</a>。</p>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>为了文档更加清晰，本文档采用<strong>原生</strong>微信小程序。目标：实现登录、授权、token过期处理完整机制。</p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ul>
<li>服务端语言：<code>Node.js</code></li>
<li>server框架：<code>Koa</code>+<code>koa-router</code></li>
<li>数据库：<code>MongoDB</code>，使用 <code>mongoose</code> 操作数据库</li>
</ul>
<a id="more"></a>

<p>目标：设计合理、服务稳定、实现高并发。</p>
<h2 id="流程介绍"><a href="#流程介绍" class="headerlink" title="流程介绍"></a>流程介绍</h2><p>根据微信官方提供的登录流程图，我们需要将前后端工作进行划分以及细化。</p>
<p><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/api-login.2fcc9f35.jpg" alt="小程序登录流程图"></p>
<p>在上述流程图的基础上，我们还需进行如下的工作：</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>小程序</th>
<th>Node.js</th>
</tr>
</thead>
<tbody><tr>
<td>调取登录前</td>
<td>登录态检测、是否需要进行登录</td>
<td>-</td>
</tr>
<tr>
<td>获取登录态后</td>
<td>-</td>
<td>对用户数据进行存储、关联</td>
</tr>
</tbody></table>
<p>本文中登录功能的实现，是将用户信息和code一同发送至服务端进行进一步的操作。</p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="一、小程序登录检测"><a href="#一、小程序登录检测" class="headerlink" title="一、小程序登录检测"></a>一、小程序登录检测</h3><p>小程序开发中，我们通常将用户的登录凭证相关信息放入 <code>storage</code> 中，以便之后可直接发送业务请求，当 storage 内的信息失效后再进行登录操作。本文所实现的登录方式，是将登录信息是与小程序登录态相关联，所以登录态的有效期即视为 token 有效期。</p>
<p><em>(以下所有的小程序 API 都经过了异步封装)</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对所有微信 API 进行了异步封装</span></span><br><span class="line"><span class="keyword">let</span> storage = wxGetStorage(<span class="string">&#x27;authorizeData&#x27;</span>)</span><br><span class="line"></span><br><span class="line">App(&#123;</span><br><span class="line">    <span class="keyword">async</span> onLaunch () &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; token &#125; = <span class="keyword">await</span> wxGetStorage(<span class="string">&#x27;authorizeData&#x27;</span>) || &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line">            <span class="comment">// storage 中存在 token，则判断登录态</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">await</span> wxCheckSession()</span><br><span class="line">                <span class="comment">// 登录态未过期，开始调用业务请求</span></span><br><span class="line">                <span class="comment">// requests</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> () &#123;</span><br><span class="line">                <span class="comment">// 登录台已过期，需要重新进行登录</span></span><br><span class="line">                <span class="built_in">this</span>.login()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// storage 中不存在 token，则直接调取登录函数</span></span><br><span class="line">            <span class="built_in">this</span>.login()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>接下来就是 <code>login</code> 函数的实现。由于此处是将用户的 <code>encryptedData</code>、<code>iv</code>、<code>code</code>统一发送至服务端，服务端 Node 来进行鉴权等一系列操作，所以还需进行授权状况的判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">async</span> login () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; authSettings &#125; = <span class="keyword">await</span> wxGetSettings()</span><br><span class="line">    <span class="keyword">if</span> (authSettings[<span class="string">&#x27;scope.userInfo&#x27;</span>]) &#123;</span><br><span class="line">        <span class="comment">// 用户已授权获取用户信息</span></span><br><span class="line">        <span class="keyword">const</span> &#123; encryptedData, iv &#125; = <span class="keyword">await</span> wxGetUserInfo()</span><br><span class="line">        <span class="keyword">const</span> &#123; code &#125; = <span class="keyword">await</span> wxLogin()</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> wxRequest(&#123;</span><br><span class="line">                url: <span class="string">&#x27;http://xxx/oauth/login&#x27;</span>,</span><br><span class="line">                methods: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    encryptedData,</span><br><span class="line">                    iv,</span><br><span class="line">                    code</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// data 中两个字段：token、userInfo</span></span><br><span class="line">            wxSetStorage(<span class="string">&#x27;authorizeData&#x27;</span>, &#123;</span><br><span class="line">                token: data.token</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 进行业务请求</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="comment">// 登录错误处理</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 用户未授权获取用户信息</span></span><br><span class="line">        <span class="comment">// 使用 button open-type 唤起授权进行登录</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二、服务端（Node）"><a href="#二、服务端（Node）" class="headerlink" title="二、服务端（Node）"></a>二、服务端（Node）</h3><p>微信服务中，确定用户唯一性的方式包括了以下两种：<code>UnionID</code>与<code>openId</code>，两者具体区别及应用场景请进入<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/union-id.html">官方文档</a>进行了解。</p>
<p>由于小程序端传入三个值分别为<code>encryptedData</code>、<code>iv</code>和<code>code</code>，使用流程如下：</p>
<ol>
<li>通过<code>code2session</code>，用 code 换取用户<code>openid</code>以及<code>session_key</code>，openid 可作为用户唯一标识符。</li>
<li>使用上一步得到的 session_key 与 iv 来解密 encryptoData，获取用户信息。</li>
</ol>
<p>在之后就是对所得数据的具体操作，以此来实现登录功能。下面就是需要进行的具体操作：</p>
<h4 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h4><p>在进行 API 的实现前，我们首先需要实现所需要的工具函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/oauth.js</span></span><br><span class="line"><span class="comment">// OAuth 工具类，实现获取登录态及用户信息的功能</span></span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;./request&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; createHourToken, createMonthToken &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./jwt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Oauth</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.APP_ID = config.APP_ID</span><br><span class="line">        <span class="built_in">this</span>.APP_SECRET = config.APP_SECRET</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getUser 获取用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param <span class="type">&#123;Object&#125;</span> </span>options 所需数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getUser</span>(<span class="params">&#123;code, encryptedData, iv&#125;</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            methods: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            url: <span class="string">`https://api.weixin.qq.com/sns/jscode2session?appid=<span class="subst">$&#123;<span class="built_in">this</span>.APP_ID&#125;</span>&amp;secret=<span class="subst">$&#123;<span class="built_in">this</span>.APP_SECRET&#125;</span>&amp;js_code=<span class="subst">$&#123;code&#125;</span>&amp;grant_type=authorization_code`</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取 openid 及 session_key</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse((<span class="keyword">await</span> request(options)).body)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成 token</span></span><br><span class="line">        <span class="keyword">const</span> _l = createHourToken(&#123; <span class="attr">openid</span>: data.openid, <span class="attr">session_key</span>: data.session_key &#125;)</span><br><span class="line">        <span class="keyword">const</span> _s = createMonthToken(&#123; <span class="attr">openid</span>: data.openid, <span class="attr">session_key</span>: data.session_key &#125;)</span><br><span class="line">        data.local_token = _l</span><br><span class="line">        data.server_token = _s</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对 encryptedData 进行解密，获取用户信息</span></span><br><span class="line">        <span class="keyword">if</span> (encryptedData &amp;&amp; iv) &#123;</span><br><span class="line">            data.userInfo = <span class="built_in">this</span>.decrypt(encryptedData, iv, data.session_key)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="title">decrypt</span>(<span class="params">encryptedData, iv, session_key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> sessionKey = Buffer.from(session_key, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">        encryptedData = Buffer.from(encryptedData, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">        iv = Buffer.from(iv, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> decoded</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> decipher = crypto.createDecipheriv(<span class="string">&#x27;aes-128-cbc&#x27;</span>, sessionKey, iv)</span><br><span class="line">            decipher.setAutoPadding(<span class="literal">true</span>)</span><br><span class="line">            decoded = decipher.update(encryptedData, <span class="string">&#x27;binary&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            decoded += decipher.final(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">            decoded = <span class="built_in">JSON</span>.parse(decoded)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;1Illegal Buffer&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (decoded.watermark.appid !== <span class="built_in">this</span>.APP_ID) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;2Illegal Buffer&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decoded</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">config</span> =&gt;</span> <span class="keyword">new</span> Oauth(config);</span><br></pre></td></tr></table></figure>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>我们使用 mongoose 来管理数据库，设置 Schema。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// models/user.js</span></span><br><span class="line"><span class="comment">// User Collection Model</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    created_at: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now() &#125;,</span><br><span class="line">    updated_at: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now() &#125;,</span><br><span class="line">    openid: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">    session_key: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">    local_token: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">    server_token: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">    userInfo: &#123;</span><br><span class="line">        nickname: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">        city: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">        gender: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        province: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">        avatar: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">UserSchema.pre(<span class="string">&#x27;save&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isNew) &#123;</span><br><span class="line">        <span class="built_in">this</span>.created_at = <span class="built_in">this</span>.updated_at = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">UserSchema.methods = &#123;</span><br><span class="line">&#125;</span><br><span class="line">UserSchema.statics = &#123;</span><br><span class="line">    <span class="comment">// 使用 openid 搜索</span></span><br><span class="line">    findByOpenid: <span class="function"><span class="keyword">function</span> (<span class="params">openid</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.findOne(&#123; openid &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 更新 openid 对应 user</span></span><br><span class="line">    updateByOpenid: <span class="function"><span class="keyword">function</span> (<span class="params"> user </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.updateOne(&#123;</span><br><span class="line">            openid: user.openid</span><br><span class="line">        &#125;, user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;user&#x27;</span>, UserSchema)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="API-实现"><a href="#API-实现" class="headerlink" title="API 实现"></a>API 实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routers/oauth.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line"><span class="comment">// config 含有 APP_ID 以及 APP_SECRET</span></span><br><span class="line"><span class="keyword">const</span> oauth = <span class="built_in">require</span>(<span class="string">&#x27;../utils/oauth&#x27;</span>)(config)</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">&#x27;../models/user&#x27;</span>)</span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line"><span class="built_in">module</span>.exports = router.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">&#123; request, response &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> oauth.getUser(request.body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> existed = <span class="keyword">await</span> User.findByOpenid(data.openid)</span><br><span class="line">    <span class="keyword">if</span> (existed) &#123;</span><br><span class="line">        <span class="comment">// 已存在该用户，更新用户信息</span></span><br><span class="line">        <span class="keyword">await</span> User.updateByOpenid(formatUserToSaveData(data))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 新用户，新建用户</span></span><br><span class="line">        <span class="keyword">const</span> user = <span class="keyword">new</span> User(formatUserToSaveData(data))</span><br><span class="line">        <span class="keyword">await</span> user.save()</span><br><span class="line">    &#125;</span><br><span class="line">    response.body = formatUserToPublicData(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="token-检测"><a href="#token-检测" class="headerlink" title="token 检测"></a>token 检测</h4><p>到此，登录的基础功能就已全部完成，接下来就是对小程序端传入的 token 进行检测。token 的检测分为两步：</p>
<ol>
<li>token 是否在有效期内</li>
<li>token 对应的用户数据是否存在</li>
</ol>
<p>两者有一不符合，则视为 token 无效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小程序端请求头中添加token信息</span></span><br><span class="line">wxRequest(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    header: &#123;</span><br><span class="line">        Authorization: token</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端检测token是否有效</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">checkToken</span> (<span class="params">&#123; request, response &#125;, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; authorization &#125; = request.header</span><br><span class="line">    <span class="keyword">const</span> tokenInfo = verifyToken(authorization)</span><br><span class="line">    <span class="keyword">const</span> existed = <span class="keyword">await</span> User.findByOpenid(tokenInfo.openid)</span><br><span class="line">    <span class="keyword">if</span> (existed) request.user = existed</span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// router 中添加中间件</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, checkToken, callback)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 唤起第三方 App</title>
    <url>/2020/04/04/notes/Web%E5%94%A4%E8%B5%B7%E7%AC%AC%E4%B8%89%E6%96%B9App/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做<a href="">公司官方App</a>的H5落地页，需要在Web中唤起应用的指定页面。遇到许多问题，查找的各处文档都不是很全面。所以觉得有必要自己记录一下。</p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>在Web页面中点击指定按钮，已安装App唤起相应页面，未安装App跳转至下载页。</p>
<a id="more"></a>

<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li>是否安装App</li>
<li>微信对于非合作伙伴的唤起进行了拦截</li>
<li>iOS Universal Links跨域问题</li>
</ol>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>Android在微信中采用了使用应用宝App Links功能来唤起App，其他浏览器统一使用scheme。需要手动根据页面状态来判断安装情况，详见问题1解决方式。</p>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>iOS9以上，是支持使用Universal Links唤起App，所以在支持的条件下，使用Universal Links唤起，不支持时使用scheme唤起。<strong>跨域打开Universal Links地址，会自动唤起App。</strong></p>
<p><strong>需留意</strong></p>
<ol>
<li>正确配置association文件，并通过apple官方检验</li>
<li>Universal Links<strong>必须跨域</strong>才可唤起App</li>
</ol>
<h2 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h2><h3 id="1-是否安装App"><a href="#1-是否安装App" class="headerlink" title="1. 是否安装App"></a>1. 是否安装App</h3><p>因为iOS可以通过Universal Links唤起App，所以与Android判断方式不一致。</p>
<p><strong>iOS</strong></p>
<p>Universal Links唤起时，如果已安装App直接唤起对应路径页，并关闭当前页。所以只需在打开对应页面的时候，重定向至app store。无需格外判断。</p>
<p><strong>Andorid</strong></p>
<p>安卓中，使用scheme唤起时，需要根据一段时间内页面状态来模拟实现是否成功唤起App，首次唤起出现alert提示时会对该规则有影响，仍会跳转至下载页。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">checkOpen (cb) &#123;</span><br><span class="line">    <span class="keyword">var</span> inter = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> status = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    inter = <span class="built_in">window</span>.setInterval(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        count++</span><br><span class="line">        status = <span class="built_in">document</span>.hidden || <span class="built_in">document</span>.webkitHidden</span><br><span class="line">        <span class="keyword">if</span> (status || count &gt; <span class="number">30</span>) &#123;</span><br><span class="line">            cb(status)</span><br><span class="line">            <span class="built_in">clearInterval</span>(inter)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-微信对于非合作伙伴的唤起进行了拦截"><a href="#2-微信对于非合作伙伴的唤起进行了拦截" class="headerlink" title="2. 微信对于非合作伙伴的唤起进行了拦截"></a>2. 微信对于非合作伙伴的唤起进行了拦截</h3><p>除了iOS Universal Links方式外，在微信中都使用应用宝的App Links功能来唤起，未安装时自动跳转至对应平台下载页。</p>
<h3 id="3-iOS-Universal-Links跨域问题"><a href="#3-iOS-Universal-Links跨域问题" class="headerlink" title="3. iOS Universal Links跨域问题"></a>3. iOS Universal Links跨域问题</h3><p>条件允许的话，最好将进行唤起功能的逻辑独立在一个空白域名下。因为一些原因，我方只能使用多个环境中交互进行跳转。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webHosts = &#123;</span><br><span class="line">    a: <span class="string">&#x27;a-guokrapp.guokr.com&#x27;</span>,</span><br><span class="line">    b: <span class="string">&#x27;b-guokrapp.guokr.com&#x27;</span>,</span><br><span class="line">    c: <span class="string">&#x27;c-guokrapp.guokr.com&#x27;</span>,</span><br><span class="line">    d: <span class="string">&#x27;d-guokrapp.guokr.com&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">router.get(<span class="string">&#x27;^/*&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 请求query中带有访问来源的环境</span></span><br><span class="line">    <span class="keyword">const</span> fromEnv = req.query.f</span><br><span class="line">    <span class="comment">// web所属的Host</span></span><br><span class="line">    <span class="keyword">const</span> webHost = webHosts[fromEnv]</span><br><span class="line">    <span class="comment">// web所使用协议</span></span><br><span class="line">    <span class="keyword">const</span> protocol = fromEnv === <span class="string">&#x27;localhost&#x27;</span> ? <span class="string">&#x27;http://&#x27;</span>: <span class="string">&#x27;https://&#x27;</span></span><br><span class="line">    <span class="comment">// 有参数s则重定向至应用宝</span></span><br><span class="line">    <span class="keyword">const</span> jumpToYyb = req.query.s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fromEnv) &#123;</span><br><span class="line">        <span class="comment">// 第一次带环境跳转时，唤起app</span></span><br><span class="line">        res.redirect(protocol + webHost + req.path + <span class="string">&#x27;?s=1&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jumpToYyb) &#123;</span><br><span class="line">        <span class="comment">// 第二次跳转至应用宝</span></span><br><span class="line">        res.redirect(config.yyb)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 普通访问，正常进行</span></span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不大的功能，花费了数倍的时间才完成。一个很常见的功能，确实我首次涉及，不够熟悉。各方文档没有标注重点，大量论坛的雷同回答，在<strong>必须跨域</strong>这四个字上停留了近一天的时间。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫实践</title>
    <url>/2020/11/16/notes/%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文以合理的网络数据采集为例，介绍一下使用 <code>Node.js</code> 编写爬虫需要实现的功能以及需注意的问题。一些基础知识或不够详细，还请自行查阅文档或<a href="mailto:hi@scriptdw.com">联系笔者</a>。本篇文章只列举思路，代码节选自项目，不涉及完整的项目代码。</p>
<p>本文对应项目非恶意爬虫，不涉及以下情况：</p>
<ol>
<li>采集用户个人信息、他人商业秘密；</li>
<li>不遵守 robots 协议；</li>
<li>高频率爬取，导致目标网站无法进行正常服务。</li>
</ol>
<p><strong>请勿编写恶意爬虫！</strong></p>
<p>如果造成目标网站无法正常服务，请降低并发或优化代码。</p>
<a id="more"></a>
<h2 id="辅助工具实现"><a href="#辅助工具实现" class="headerlink" title="辅助工具实现"></a>辅助工具实现</h2><h3 id="搭建-IP-池"><a href="#搭建-IP-池" class="headerlink" title="搭建 IP 池"></a>搭建 IP 池</h3><p><strong>为何要搭建 IP 池</strong></p>
<p>使用爬虫会从那些方面影响所爬取的网站呢？占用网络带宽及硬件资源导致服务不稳定或增加费用、数据大批量被转移。而为了防止这些情况的发生，网站一般都会采用一些反爬策略来规避这些情况的发生。所以需要采取措施来应对这些策略，而搭建 IP 池主要是为了应对限制 IP 访问频率的反爬策略。</p>
<p><strong>需要实现的功能</strong></p>
<p>IP 池需要实现的功能就是三条：获取 IP - 储存 IP - 定时验证。</p>
<h4 id="免费-http-代理"><a href="#免费-http-代理" class="headerlink" title="免费 http 代理"></a>免费 http 代理</h4><p>对于免费 http 代理的获取方式，通常都是采用整合代理服务商的免费 IP 的方式。当然，也可以对可用 IP 段的所有端口进行扫描，这种方式就需要依赖于良好的网络和高性能的服务器。本节不涉及第二种方式，感兴趣的同学可自行尝试，推荐使用 <a href="https://nmap.org/">nmap</a> 等嗅探工具提高效率。</p>
<p>这种方式获得的代理可用率极低，一般不到 5%，不太推荐使用。</p>
<p>至于以何种方式来整合免费 IP 呢？当然还是得是爬虫。以<a href="https://www.kuaidaili.com/free/">快代理</a>为例，爬取步骤通常为：获取 html、解析 DOM 获取 IP 列表、验证入库，能直接获取到免费 IP 的 API 更好。不过如 <a href="https://www.zdaye.com/FreeIPList.html">zdaye</a>，则需要额外识别验证码来获取端口号，在<a href="#%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB">验证码识别</a>一节中会以此为例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getFreeIPs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 获取html、解析DOM</span></span><br><span class="line">	<span class="keyword">const</span> html = <span class="keyword">await</span> getHTML(url)</span><br><span class="line">	<span class="keyword">const</span> $ = cheerio.loadHtml(html)</span><br><span class="line">	<span class="comment">// 获取 IP 列表</span></span><br><span class="line">	<span class="keyword">const</span> freeIPList = $(<span class="string">&#x27;#list tbody tr&#x27;</span>).map(<span class="function">(<span class="params">_, elem</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			host: $(<span class="string">&#x27;td[data-title=IP]&#x27;</span>, elem).text(),</span><br><span class="line">			ip: $(<span class="string">&#x27;td[data-title=PORT]&#x27;</span>, elem).text()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;).get()</span><br><span class="line">	<span class="comment">// 验证入库，详见后面内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取免费ip</span></span><br><span class="line">getFreeIps()</span><br></pre></td></tr></table></figure>
<h4 id="付费-http-代理"><a href="#付费-http-代理" class="headerlink" title="付费 http 代理"></a>付费 http 代理</h4><p>付费代理就简单一些了，找一家靠谱的服务商购买，通常有按流量计费、按 IP 数计费等计费方式。购买后，就可以调用服务商提供的 API 来获取所需的代理 IP 了。付费服务稳定性远远不是免费代理可比的，大型服务商的都会在 99% 以上的可用率。</p>
<p>非按 IP 数计费的模式，可不进行入库及验证，随用随取就可以。</p>
<p>美中不足的一点就是，费用偏贵。以流量计费为例，笔者目前使用的服务商的收费标准是 30元/GB。<del>不过，如果觉得贵，是不是可以使用免费代理中提到的方法来扫描这些可用 IP 呢？</del>不过，如果觉得贵，也可以采用下面将要提到的 SSR 转 http 代理的方式。</p>
<h4 id="SSR-转-http-代理"><a href="#SSR-转-http-代理" class="headerlink" title="SSR 转 http 代理"></a>SSR 转 http 代理</h4><p>如果觉得付费代理太贵，而手头有每季度流量都用不完的 SSR 服务，可以尝试将 SSR 转为 http 代理，需自己实现代理的服务。</p>
<p>首先尝试了许多 shadowsocks 相关开源的库，但是都不能达到想要的效果。大多都存在以下问题：</p>
<ol>
<li>不支持解析 SSR 混淆协议，如 <a href="https://github.com/shadowsocks/shadowsocks-libev/blob/master/completions/bash/ss-local">shadowsocks-libev</a>；</li>
<li>不支持 <code>chacha20-ietf</code> 解码，如 <a href="https://github.com/shadowsocksr-backup/shadowsocksr">Shadowsocks for Python</a>。</li>
</ol>
<p>最后想到笔者自己电脑上使用 <a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowSocksR-NG</a> 来科学上网，其客户端支持 SSR 以及转为 HTTP 代理的功能。在浏览其源码后，找到了其所使用的 <code>ss-local</code>，具体位置为 <a href="https://github.com/shadowsocks/ShadowsocksX-NG/blob/3fd8ba864ae73bcfc2440299b90b0b89d9ab89b6/ShadowsocksX-NG/LaunchAgentUtils.swift"><code>NSHomeDirectory() + APP_SUPPORT_DIR + &quot;ss-local-latest/ss-local&quot;</code></a>，用法与 <a href="https://github.com/shadowsocks/shadowsocks-libev/blob/master/completions/bash/ss-local">shadowsocks-libev</a> 基本一致。至此，SSR 转 socks 就只是写命令的问题了。</p>
<p>（因为要创建 IP 池，所以会创建许多提供 socks 代理的端口。</p>
<p>到此，如果要将其转为 http 代理，则需要使用 privoxy 等工具，不过这些大多都是一个 http 端口对应一个 socks 端口。如果有 30 个节点，就需要开放 30*2 个端口。笔者是使用 Node.js 建立了一个简单的请求转发服务，内部实现类似负载均衡的功能，对外暴露一个端口。所有需要代理的 http 请求，将其转发至该端口就可。</p>
<h4 id="自己搭建代理服务"><a href="#自己搭建代理服务" class="headerlink" title="自己搭建代理服务"></a>自己搭建代理服务</h4><p>在下在尝试时几种方式来搭建自身的小流量代理，但由于并未能有时间实现其自动化等原因导致最后不了了之。有兴趣的读者可以进行尝试：</p>
<ol>
<li>在位于腾讯云的 Kubernetes 的平台，创建节点伸缩组，自动扩容并在节点上运行对应的代理服务；</li>
<li>使用 Serverless 云函数来做转发。</li>
</ol>
<p>这几种方式由于需要走 DNS 解析等一系列流程，响应速度会稍慢。并且需要使用腾讯云的 API 自己实现一套自动化的系统。</p>
<h4 id="入库及验证"><a href="#入库及验证" class="headerlink" title="入库及验证"></a>入库及验证</h4><p>数据入库最好将 IP 作为 unique key，不要存储相同的 IP。并且在存储之前最好进行有效性的验证，因为不是所有的代理 IP 都是有效的，特别是免费 IP。</p>
<p>已入库的可定时进行验证，也可记录错误次数，达到次数后删除该 IP。</p>
<h3 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h3><p>以上文说到的 <a href="">zdaye</a> 为例，其免费 IP 端口号是以一次性验证码的形式所展现的，所以想要自动获取其端口号，则需要增加验证码识别的功能。因为笔者使用 Node.js，所以采用了 <a href="https://www.npmjs.com/package/tesseract.js">tesseract.js</a>。使用方式可查看文档。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createWorker &#125; <span class="keyword">from</span> <span class="string">&#x27;tesseract.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> worker = createWorker()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="keyword">await</span> getHTML(<span class="string">&#x27;https://www.zdaye.com/FreeIPList.html&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> $ = cheerio.loadHtml(html)</span><br><span class="line"><span class="comment">// 获取/解析免费 IP 列表</span></span><br><span class="line"><span class="keyword">const</span> ipList = $(<span class="string">&#x27;#ipc tbody tr&#x27;</span>).map(<span class="keyword">async</span> (_, elem) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> &#123; <span class="attr">data</span>: &#123;<span class="attr">text</span>: port&#125;&#125; = <span class="keyword">await</span> worker.recognize($(<span class="string">&#x27;img&#x27;</span>, elem).attr(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		host: $(<span class="string">&#x27;td&#x27;</span>, elem).first().text(),</span><br><span class="line">		port,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;).get()</span><br></pre></td></tr></table></figure>
<p><strong>验证码降噪</strong></p>
<p>对于一些存在噪点或其他影响的验证码可以通过 <code>graphicsmagick</code> 降噪后再处理。如 zdaye 通过验证码后面的参数来增加噪点，可处理后再进行识别。<a href="https://www.npmjs.com/package/tesseract.js">tesseract.js</a> 支持增加语言库，可以添加各类语言库来增强识别率。</p>
<h3 id="网络资源转存"><a href="#网络资源转存" class="headerlink" title="网络资源转存"></a>网络资源转存</h3><p>资源转存说通俗点就是从目标站点下载再上传到自己的存储空间。而下载到本地这一步则需要占用大量的物理存储空间，如果需要降低存储占用以及频繁的文件读写，可尝试使用<a href="http://nodejs.cn/api/stream.html#stream_stream">“流”</a>的方式来上传文件。</p>
<p>完成这一步，所需工具有三：</p>
<ol>
<li>支持返回可读流格式的网络请求工具，<a href="https://github.com/request/request-promise">request-promise</a> 等;</li>
<li>支持上传可读流的云厂商，<a href="https://www.qiniu.com/">Qiniu</a> 等；</li>
<li>云厂商 SDK，<a href="https://www.npmjs.com/package/qiniu">qiniu</a> 等。</li>
</ol>
<h4 id="七牛云存储"><a href="#七牛云存储" class="headerlink" title="七牛云存储"></a>七牛云存储</h4><p>以将 youtube 视频转存到七牛云为例，采用以 putStream 的方式来转存文件。</p>
<p>首先，我们需要根据 youtube 网页链接解析出对应视频的下载链接。推荐使用 <a href="https://www.npmjs.com/package/ytdl-core">ytdl-core</a> 来解析下载链接，该工具使用简单，这一步在此不做赘述，感兴趣的同学可以查看其文档进行尝试。</p>
<p>接下来，我们需要使用 <a href="https://github.com/request/request-promise">request-promise</a> 请求视频获取可读流。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request-promise&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 来源网站的视频下载链接</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://image.scriptdw.com/xxxxxxx&#x27;</span></span><br><span class="line"><span class="keyword">const</span> readableStream = request(url)</span><br></pre></td></tr></table></figure>
<p>只需要几行，所需的可读流就获取完成了。最后，就应该将其上传到云存储空间，我们使用了七牛官方的 SDK <a href="https://www.npmjs.com/package/qiniu">qiniu</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qiniu = <span class="built_in">require</span>(<span class="string">&#x27;qiniu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所需的配置项，可根据自己的情况来修改</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="keyword">new</span> qiniu.conf.Config()</span><br><span class="line">config.zone = qiniu.zone.Zone_z0</span><br><span class="line"><span class="keyword">const</span> formUploader = <span class="keyword">new</span> qiniu.form_up.FormUploader(config)</span><br><span class="line"><span class="keyword">const</span> putExtra = <span class="keyword">new</span> qiniu.form_up.PutExtra()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 上传可读流至七牛</span></span><br><span class="line"><span class="comment">* @param stream ReadableStream 可读流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadStream</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve) =&gt; &#123;</span><br><span class="line">	    <span class="comment">// 获取上传 token</span></span><br><span class="line">        <span class="keyword">const</span> token = <span class="keyword">await</span> <span class="built_in">this</span>.getToken()</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            formUploader.putStream(token, <span class="literal">null</span>, stream, putExtra, <span class="function">(<span class="params">err, body, info</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (info?.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">                    resolve(body.key)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            reject(err.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用就这么简单：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> readableStream = request(url)</span><br><span class="line">	<span class="keyword">const</span> data = <span class="keyword">await</span> uploadStream(readableStream)</span><br><span class="line">	<span class="comment">// data: &#123;key: &#x27;QINIU_KEY_XXXXXXX&#x27;, hash: &#x27;QINIU_HASH_XXXXXXX&#x27;, ...&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">save(<span class="string">&#x27;https://image.scriptdw.com/xxxxxxx&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>从实际代码中可以看出来，以 stream 的方式转存文件不涉及本地文件操作很简单，但是有利就有弊。采用该方式上传文件，无法进行断点续传，所以需要根据自己的实际情况来考虑上传的方式。如果确保网络足够稳定或是转存小文件，则建议使用 stream 的方式。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="Node-js-多线程"><a href="#Node-js-多线程" class="headerlink" title="Node.js 多线程"></a>Node.js 多线程</h3><p>想要爬虫更高效地获取数据，我们需要采用多线程的方式来运行爬虫脚本。Node.js 中 <a href="https://nodejs.org/api/worker_threads.html">worker_threads（工作线程）</a> 模块允许使用并行地执行 Javascript 的线程，当然还可以使用 <a href="https://nodejs.org/api/child_process.html"><code>child_process</code></a> 或 <a href="https://nodejs.org/api/cluster.html"><code>cluster</code></a> 来实现。</p>
<p>因为 <code>worker</code> 的创建和销毁十分消耗性能，所以我们需要封装一个线程池来管理所有任务。线程池主要需要实现以下功能：</p>
<ol>
<li>外部可插入自定义任务；</li>
<li>增加自定义任务时，优先使用空闲线程来运行任务，无空闲线程时先存储在任务队列，有空闲线程时顺序执行；</li>
<li>线程销毁等功能。</li>
</ol>
<p>具体实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Worker &#125; = <span class="built_in">require</span>(<span class="string">&#x27;worker_threads&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">length</span>: cpusLength &#125; = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>).cpus()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">workerPath, numberOfThreads = cpusLength</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numberOfThreads &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Number of threads&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.workerPath = workerPath</span><br><span class="line">        <span class="built_in">this</span>.numberOfThreads = numberOfThreads</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>._queue = []</span><br><span class="line">        <span class="built_in">this</span>._workersById = &#123;&#125;</span><br><span class="line">        <span class="built_in">this</span>._activeWorkersById = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.numberOfThreads; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(workerPath)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>._workersById[i] = worker</span><br><span class="line">            <span class="built_in">this</span>._activeWorkersById[i] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getInactiveWorkerId</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.numberOfThreads; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>._activeWorkersById[i]) <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">runWorker</span>(<span class="params">workerId, taskObj</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> worker = <span class="built_in">this</span>._workersById[workerId]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> doAfterTaskIsFinished = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            worker.removeAllListeners(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">            worker.removeAllListeners(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>._activeWorkersById[workerId] = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>._queue.length) &#123;</span><br><span class="line">                <span class="built_in">this</span>.runWorker(workerId, <span class="built_in">this</span>._queue.shift())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>._activeWorkersById[workerId] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> messageCallback = <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">            taskObj.cb(<span class="literal">null</span>, result)</span><br><span class="line">            doAfterTaskIsFinished()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> errorCallback = <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            taskObj.cb(error)</span><br><span class="line">            doAfterTaskIsFinished()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        worker.once(<span class="string">&#x27;message&#x27;</span>, messageCallback)</span><br><span class="line">        worker.once(<span class="string">&#x27;error&#x27;</span>, errorCallback)</span><br><span class="line"></span><br><span class="line">        worker.postMessage(taskObj.data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> availableWorkerId = <span class="built_in">this</span>.getInactiveWorkerId()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> taskObj = &#123;</span><br><span class="line">                data,</span><br><span class="line">                cb: <span class="function">(<span class="params">error, result</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (error) reject(error)</span><br><span class="line">                    <span class="keyword">return</span> resolve(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (availableWorkerId === -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>._queue.push(taskObj)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.runWorker(availableWorkerId, taskObj)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">destroy</span>(<span class="params">force = <span class="literal">false</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.numberOfThreads; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>._activeWorkersById[i] &amp;&amp; !force) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`The worker <span class="subst">$&#123;i&#125;</span> is still running!`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>._workersById[i].terminate()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="控制并发"><a href="#控制并发" class="headerlink" title="控制并发"></a>控制并发</h3><p>爬取数据时，需要根据目标网站的稳定性、自身的带宽等来限制请求的并发数。由于带宽限制，否则会影响正常使用，所以笔者将并发的控制完全交给线程池，也就是将并发数限制在 cpu 核数。</p>
<p>线程池的使用方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> workerPath = path.join(__dirname, <span class="string">&#x27;./worker.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pool = <span class="keyword">new</span> WorkerPool(workerPath)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(data).map(<span class="keyword">async</span> (item, index) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> pool.run(item)</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    pool.destroy(<span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// console.log(&#x27;finished&#x27;)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>因为篇幅的限制，数据库等方面内容还请感兴趣的读者自行查阅，暂不在本篇中讲述。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.05.15 周报</title>
    <url>/2020/05/15/weekly/weekly-2020-05-15/</url>
    <content><![CDATA[<h2 id="2020-5-6-2020-5-15-周报"><a href="#2020-5-6-2020-5-15-周报" class="headerlink" title="2020.5.6-2020.5.15 周报"></a>2020.5.6-2020.5.15 周报</h2><h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><p><strong>完善私有npm仓库</strong></p>
<ul>
<li>项目基础配置及文档 已完成</li>
<li>versioning自动部署。修改values中更新策略为重建，解决挂载宿主机目录导致部署前需先关闭原有容易的问题 已完成 </li>
<li>包存储策略优化 商讨实现中</li>
</ul>
<p><strong>个人计划</strong></p>
<ul>
<li>继续阅读React源码，并在Gitbook同步阅读笔记</li>
<li>图像的隐形加密，目前只尝试了信息嵌入、隐写术，后续会尝试是否能够通过滤波器或矩阵来实现</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.05.29 周报</title>
    <url>/2020/05/29/weekly/weekly-2020-05-29/</url>
    <content><![CDATA[<h2 id="2020-5-18-2020-5-29-周报"><a href="#2020-5-18-2020-5-29-周报" class="headerlink" title="2020.5.18~2020.5.29 周报"></a>2020.5.18~2020.5.29 周报</h2><h3 id="完成内容"><a href="#完成内容" class="headerlink" title="完成内容"></a>完成内容</h3><p><strong>私有NPM源</strong></p>
<ul>
<li>文档完善</li>
<li>进行测试并上线</li>
</ul>
<h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><p><strong>个人计划</strong></p>
<ul>
<li>继续阅读React源码，并在Gitbook同步阅读笔记</li>
<li>图像的隐形加密，目前只尝试了信息嵌入、隐写术，后续会尝试是否能够通过滤波器或矩阵来实现</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.9.30 周报</title>
    <url>/2020/09/30/weekly/weekly-2020-09-30/</url>
    <content><![CDATA[<h2 id="2020-9-20-2020-9-30-周报"><a href="#2020-9-20-2020-9-30-周报" class="headerlink" title="2020.9.20-2020.9.30 周报"></a>2020.9.20-2020.9.30 周报</h2><p><strong>IP池搭建：</strong></p>
<p>背景：最近空闲时间在尝试爬虫相关知识，需要一些代理IP来支持。</p>
<p>内容：</p>
<ol>
<li>定时爬取10+提供免费代理的网站，整合代理信息；</li>
<li>定时检测代理可用性，删除失效代理；</li>
<li>提供获取代理ip接口。</li>
</ol>
<a id="more"></a>

<p>遇到的问题：</p>
<ol>
<li>免费代理有效时长短，有效率低，基本上不可用；</li>
<li>付费代理对尝试爬虫的我来说价格高且有点浪费；</li>
<li>一些提供较高可用率代理的网站（如<a href="https://www.zdaye.com/FreeIPList.html">zdaye</a>），端口号是以验证码的方式给出，之后有时间会尝试一下验证码的识别。</li>
</ol>
<p>思考：</p>
<ol>
<li><p>和fanjun了解了一下公司的IP池，是在每台服务器上部署了一个爬虫服务。IP池不算庞大，这种方式暂时对我们的业务量来说足够，但是不足以支持大批量的爬取；</p>
</li>
<li><p>借鉴1，因为我只有一台云服务器，单节点的k8s集群。是否能够使用多个负载均衡器来类比实现IP池？建一个简单的代理服务，对应多个负载均衡，如果可行是否需要学习[squid]；或增加一批1核1G的机器。(<a href="http://www.squid-cache.org/">http://www.squid-cache.org/</a>) </p>
 <img src="/uploads/zhoubao/images/m_57c538a240d17b04e013648427f1b920_r.png" width="500px"/>

</li>
</ol>
<p><strong>Youtube视频抓取：</strong></p>
<ol>
<li>基于<code>ytdl</code>根据页面URL获取对应视频信息；</li>
<li>筛选视频格式及分辨率，如MP4、FLV，1080P等；</li>
<li>将每次请求到的可读流上传到qiniu，最后生成对应文件。简化下载视频到服务器 - 上传视频到cdn - 删除临时视频的步骤。</li>
</ol>
<p>遇到的问题及解决方案：</p>
<ol>
<li>问题：如果现将识别出来的视频下载到本地，再上传到qiniu的话。效率会变慢，并且会增加对存储空间的需求。<br> 解决方案：qiniu支持以文件流的方式来上传视频，所以尝试将视频请求中产生的可读流上传至qiniu，最终生成对应文件<br> 相关资料：<a href="https://developer.qiniu.com/kodo/sdk/1289/nodejs">Qiniu Node.js SDK</a>，<a href="https://nodejs.org/api/stream.html">Node.js Stream</a> <img src="/uploads/zhoubao/images/m_d380f965d5f8cc3283ca9d516ef95c5b_r.png" height="200px"/>

</li>
</ol>
<p><strong>GitLab：</strong></p>
<p>公司Gitlab版本： 12.10.14-ee</p>
<p>内容：</p>
<ol>
<li>实现 gitlab OAuth2 授权，获取对应scope权限</li>
<li>熟悉 gitlab api，并通过授权所得token获取对应信息</li>
</ol>
<p>步骤：</p>
<ol>
<li>在<a href="https://git.guokr.net/profile/applications">Gitlab应用管理页</a>增加新的Application。定义scope、redirect_url，取得AppID、secret</li>
<li>根据 <a href="https://docs.gitlab.com/12.10/ee/api/oauth2.html">Gitlab Oauth2 文档</a> 编写授权逻辑，获取token等信息</li>
<li>使用token调取对应<a href="https://docs.gitlab.com/12.10/ee/api/api_resources.html">Api</a></li>
</ol>
<p>遇到的问题：</p>
<ol>
<li>第一版是将授权步骤完全放在NodeJS中，步骤2中采用<code>Implicit grant flow</code>的方式来获取授权。但是因为access_token是在#后面传入的，服务端是收不到这段信息的。所以改为<code>Web application flow</code>的方式在web端来授权。</li>
</ol>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.10.23 周报</title>
    <url>/2020/10/23/weekly/weekly-2020-10-23/</url>
    <content><![CDATA[<h2 id="2020-10-09-2020-10-23-周报"><a href="#2020-10-09-2020-10-23-周报" class="headerlink" title="2020.10.09-2020.10.23 周报"></a>2020.10.09-2020.10.23 周报</h2><p><strong>爬虫实践</strong></p>
<ul>
<li>稳定爬取某书籍网站5w+列表以及2w+书籍内容；</li>
<li>NodeJS完成了Youtube、网易云MV、人人视频链接在线解析功能；</li>
</ul>
<a id="more"></a>

<p><strong>IP池</strong></p>
<p>目前使用了几种方式来构建自己的ip池：</p>
<ol>
<li>使用云函数进行代理；<br>  优点：不额外占用服务器资源 0.02/h。<br>  缺点：ip被封后需要手动删除-新增云函数；腾讯云不支持自己创建云函数模版的功能，需本地重新上传。</li>
<li>在腾讯云集群中创建1核1G的伸缩组节点 0.06/h<br>  优点：按需分配节点数量，且节点同时可用来运行其他服务。<br>  缺点：ip被封后也需要手动注销节点；开放外网服务需要增加费用，使用ingress得走dns解析等会拖慢速度。</li>
<li>同时使用了第三方代理的付费服务，以支持IP需求高的爬取服务。</li>
</ol>
<p>思考：后续有时间的话，可能会查阅腾讯云的api文档，以支持1、2的自动化重建</p>
<p><strong>微信mp服务尝试</strong></p>
<p>进行了微信mp服务的尝试，主要是了解其支持的功能以及实现方案：</p>
<ul>
<li>熟悉微信mp开发文档以及传输数据格式；</li>
<li>申请并使用微信公众平台测试账号提供服务；</li>
<li>使用frp进行搭建服务器-本地机器的内网穿透，实现本地调试；</li>
<li>根据传输数据格式，构建xml解析、xml生成等基础功能。</li>
</ul>
<p>PS：之后暂时会暂停爬虫以及功能实践的尝试，静下来学习一些底层的知识</p>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.11.06 周报</title>
    <url>/2020/11/06/weekly/weekly-2020-11-06/</url>
    <content><![CDATA[<h2 id="2020-10-26-2020-11-06-周报"><a href="#2020-10-26-2020-11-06-周报" class="headerlink" title="2020.10.26-2020.11.06 周报"></a>2020.10.26-2020.11.06 周报</h2><p><strong>其他</strong></p>
<ul>
<li>历史爬虫数据：截止今天已抓取书籍内容63W条，qiniu已存储书籍封面900MB</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.11.20 周报</title>
    <url>/2020/11/20/weekly/weekly-2020-11-20/</url>
    <content><![CDATA[<h2 id="2020-11-09-2020-11-20-周报"><a href="#2020-11-09-2020-11-20-周报" class="headerlink" title="2020.11.09-2020.11.20 周报"></a>2020.11.09-2020.11.20 周报</h2><p><strong>爬虫实践</strong></p>
<ul>
<li>历史数据：书籍98W条，文本储存量4GB+，缓存页面数据 400MB+。至此爬虫尝试结束，稳定性达到期待的预期，所需功能也都涉及学习到了。</li>
<li>上周额外进行的尝试：SSR 转 HTTP 代理。<ul>
<li>背景：收费 HTTP 代理价格昂贵，自身拥有 40 台提供 SSR 服务的节点，流量基本上无法用完。</li>
<li>遇到的问题：<ol>
<li>大部分 shadowsocks 相关的库都不支持解析 SSR 混淆协议，如 <a href="https://github.com/shadowsocks/shadowsocks-libev/blob/master/completions/bash/ss-local">shadowsocks-libev</a> 等；</li>
<li>部分库不支持 <code>chacha20-ietf</code> 解码，如 <a href="https://github.com/shadowsocksr-backup/shadowsocksr">Shadowsocks for Python</a> 等；</li>
</ol>
</li>
<li>思考：MacOS 版 ShadowSocksR-NG 其客户端支持 SSR 以及转为 HTTP 代理的功能，它是如何实现的？</li>
<li>解决：阅读 <a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowSocksR-NG</a> 源码，并查找其所使用的 <code>ss-local</code> 库，使用该库实现 SSR 转 Socks5。最后，使用 Node.js 实现简单的负载均衡，并将收到的 http 请求转为 Socks5 发送到对应端口。</li>
</ul>
</li>
<li>记录：简单记录了一下爬虫尝试的内容，可去往 <a href="https://blog.scriptdw.com/2020/11/16/notes/%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5/#more">技术尝试-爬虫尝试</a> 查看。</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.12.04 周报</title>
    <url>/2020/12/04/weekly/weekly-2020-12.04/</url>
    <content><![CDATA[<h2 id="2020-11-23-2020-12-04-周报"><a href="#2020-11-23-2020-12-04-周报" class="headerlink" title="2020.11.23-2020.12.04 周报"></a>2020.11.23-2020.12.04 周报</h2><p><strong>内网穿透</strong></p>
<p>背景：一些应用需要合法域名才能进行测试，如微信登录、微信公众号回复等，所以利用周末的时间尝试了一下搭建多用户可用的内网穿透服务。</p>
<a id="more"></a>
<p>目前方案：微信公众号配置线上与测试环境域名，本地修改 host 来映射到本地 IP。但是存在以下问题：</p>
<ol>
<li>因为微信中只支持域名配置，本地修改 host 后，服务需要在 80 端口启动。方案不合理且不友好；</li>
<li>无法真机测试登录功能，安卓还可以连接电脑来修改 host，但是 iOS 就无法。所以无法进行本地真机测试，影响开发效率；</li>
</ol>
<p>解决方案：搭建多用户隧道服务<br>实现步骤：</p>
<ol>
<li>自建证书服务（腾讯云泛域名解析需要购买付费域名），实现切换外网域名的功能；</li>
<li>k8s 中运行 frps 服务端，根据不同实现方案，对部分端口进行 ingress 转发（api接口），部分端口开放外网访问（隧道服务端口）；</li>
<li>服务鉴权系统，部署在 k8s 中，提供 frps 与 frpc 鉴权及配置信息获取功能；</li>
<li>命令行客户端，目前使用 node 编写命令行功能。使用方式如下：<ol>
<li>全局安装 npm 包（目前还未发布）</li>
<li>根据创建的隧道服务 token 运行服务：<br><img src="/uploads/zhoubao/images/m_0de6d77b77376c9587674362e7bcd73d_r.png"></li>
<li>访问 kzxq47bbfnvq3ummjru3su.frp.scriptdw.com 就可直接访问党伟本地 6678 端口的服务（客户端运行期间）</li>
</ol>
</li>
</ol>
<p>下一步优化：</p>
<ol>
<li>使用 GO 封装客户端，实现对全平台的支持。目前 node 版只支持了 macOS、linux 64位系统，且需要配置 node 和 npm 环境；</li>
<li>优化可视化管理界面。</li>
</ol>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.12.18 周报</title>
    <url>/2020/12/18/weekly/weekly-2020-12.18/</url>
    <content><![CDATA[<h2 id="2020-12-07-2020-12-18-周报"><a href="#2020-12-07-2020-12-18-周报" class="headerlink" title="2020.12.07-2020.12.18 周报"></a>2020.12.07-2020.12.18 周报</h2><p><strong>隧道服务</strong></p>
<ul>
<li><p>目标：了解隧道服务的原理，尝试是否有用于团队开发的必要；</p>
</li>
<li><p>学习 Go 并用其构建了客户端（Linux、MaxOS）；</p>
</li>
<li><p>增加简单可视化界面；</p>
<a id="more"></a></li>
<li><p>具体使用流程如下：</p>
<ol>
<li><p>创建隧道服务（随机分配域名）；</p>
<img width="100px" src="/uploads/zhoubao/images/m_77a3fec2a166e44d8b87f60198debf34_r.png"/></li>
<li><p>修改隧道服务配置；</p>
<img width="300px" src="/uploads/zhoubao/images/m_738a058309a452f0e3108deb2a806dd8_r.png"/></li>
<li><p>使用 Token 在本地启动客户端；</p>
<img width="300px" src="/uploads/zhoubao/images/m_015cd83662a0d1c055f4e9d1fd1f50fd_r.png"/></li>
<li><p>即可在各电子设备上使用域名访问</p>
<img width="300px" src="/uploads/zhoubao/images/m_6cdefe6bf4275f95449277c00e37bd62_r.png"/></li>
</ol>
</li>
<li><p>遇到的问题：</p>
<ul>
<li>Go 写法与 js 有很大差别，为了功能只能先有目的地学习；</li>
<li>因为涉及到泛域名的解析，尝试了自建证书服务；</li>
<li>使用一个额外的 NodeJS 服务进行隧道鉴权</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>周报</tag>
      </tags>
  </entry>
</search>
